<library path="libvision_plugins">
  <class type="vision_plugins::ColorConvert" base_class_type="csapex::Node">
    <description>Converts images between color spaces</description>
  </class>
  <class type="csapex::AdaptiveThreshold" base_class_type="csapex::Node">
    <description>Adaptive thresholding</description>
  </class>
  <class type="csapex::BlobDetector" base_class_type="csapex::Node">
    <description>Detects blobs in an image and publishes them as ROIs</description>
  </class>
  <class type="csapex::Merger" base_class_type="csapex::Node">
    <description>Merges multiple images as channels into one image</description>
  </class>
  <class type="csapex::Splitter" base_class_type="csapex::Node">
    <description>Splits an image into multiple images, one for each channel</description>
  </class>
  <class type="csapex::ColorAdjustment" base_class_type="csapex::Node">
    <description>Lightness adjustment and normalization</description>
  </class>
  <class type="vision_plugins::PerspectiveTransform" base_class_type="csapex::Node">
    <description>Transforms an image using a perspective transformation</description>
  </class>
  <class type="vision_plugins::LocalPatterns" base_class_type="csapex::Node">
    <description>Extracts local patterns (binary, ternary)</description>
  </class>
  <class type="vision_plugins::Debayer" base_class_type="csapex::Node">
    <description>Debayering of images</description>
  </class>
  <class type="csapex::Morpholocial" base_class_type="csapex::Node">
    <description>Different Morphological operators like "open", "close", "tophat", "gradient"</description>
  </class>
  <class type="csapex::VJDetector" base_class_type="csapex::Node">
    <description>Viola Jones Detector</description>
  </class>
  <class type="csapex::RenderROIs" base_class_type="csapex::Node">
    <description>Render ROIs on top of an image</description>
  </class>
  <class type="csapex::MergeROIs" base_class_type="csapex::Node">
    <description>Merge overlapping ROIs</description>
  </class>
  <class type="csapex::ExtractROI" base_class_type="csapex::Node">
    <description>Extracts a subimage according to the given ROI</description>
  </class>
  <class type="csapex::NumberGenerator" base_class_type="csapex::Node">
    <description>[<i>Debug</i>] Generates images containing numbers</description>
  </class>
  <class type="csapex::LKTracking" base_class_type="csapex::Node">
    <description>Lukas Kanade tracking of features points</description>
  </class>
  <class type="vision_plugins::GenericImageCombiner" base_class_type="csapex::Node">
    <description>
        Combine images or matrices by giving an expression that will induce the
        combinatoric operation.
    </description>
  </class>
  <class type="vision_plugins::SetOperation" base_class_type="csapex::Node">
    <description>
        Compare two images using a grid
        overlay. The Feature observed in this case is the mean value of values given
        in a grid cell.
    </description>
  </class>
  <class type="vision_plugins::Undistort" base_class_type="csapex::Node">
    <description>
        Undistort and rectify images using given camera parameters.
        A margin parameter enables to gain more image data from the
        undistortion.
    </description>
  </class>
  <class type="vision_plugins::CameraCalibration" base_class_type="csapex::Node">
    <description>
        Calibrate a camera by calculating the intrinsic parameters.
        The gained parameters can be used with the 'Undistort'-Plugin.
    </description>
  </class>
  <class type="vision_plugins::Scale" base_class_type="csapex::Node">
    <description>
        Scale images from 1 to 400 percent of the original size.
    </description>
  </class>
  <class type="vision_plugins::Resize" base_class_type="csapex::Node">
    <description>
        Resize images from 10 to 10000 pixels.
    </description>
  </class>
  <class type="vision_plugins::CornerHarris" base_class_type="csapex::Node">
    <description>
        Make it possible to find corners in an image by appling the harrisCorner function.
        It turns out an grayscale image giving selected border types at extreme gradients.
    </description>
  </class>
  <class type="vision_plugins::Equalize" base_class_type="csapex::Node">
    <description>
        Do a histogram equalization on each channel of a image.
    </description>
  </class>
  <class type="vision_plugins::MonoFilter" base_class_type="csapex::Node">
    <description>
        Filter a value range an set other values to defined fix values.
    </description>
  </class>
  <class type="vision_plugins::Canny" base_class_type="csapex::Node">
    <description>
        Apply the canny edge filter to an image.
    </description>
  </class>
  <class type="vision_plugins::EigenValsAndVecs" base_class_type="csapex::Node">
    <description>
        Apply the computation of a covariation matrix of derivatives over a neighborhood
        of pixels. Calculate edges with this method.
    </description>
  </class>
  <class type="vision_plugins::HoughLinesP" base_class_type="csapex::Node">
    <description>
        Search lines in an image by using the probabilistic hough lines function
        of opencv.
    </description>
  </class>
  <class type="vision_plugins::MatrixToHeatmap" base_class_type="csapex::Node">
    <description>
        Find maxima and minima in matrices and then visualize them.
    </description>
  </class>
  <class type="vision_plugins::MedianFilter" base_class_type="csapex::Node">
    <description>
        Apply a median filter to a multichannel (1 - 4) image using a specified kernel size.
    </description>
  </class>
  <class type="vision_plugins::ConvertType" base_class_type="csapex::Node">
    <description>
        Convert a matrix to a certain data type to make it usable for further algorithms.
    </description>
  </class>
  <class type="vision_plugins::Flip" base_class_type="csapex::Node">
    <description>
        Flip matrices or images horizontal, vertical or both.
    </description>
  </class>
  <class type="vision_plugins::Laplacian" base_class_type="csapex::Node">
    <description>
        Apply the laplacian operator to an image.
    </description>
  </class>
  <class type="vision_plugins::Sobel" base_class_type="csapex::Node">
    <description>
        Apply the Sobel operator to an image.
    </description>
  </class>
  <class type="vision_plugins::Scharr" base_class_type="csapex::Node">
    <description>
        Apply the Scharr operator to an image.
    </description>
  </class>
  <class type="vision_plugins::FloatToUchar" base_class_type="csapex::Node">
    <description>
        Convert floating point matrices to uchar matrices.
    </description>
  </class>
  <class type="vision_plugins::SequenceMean" base_class_type="csapex::Node">
    <description>
        Accumulate image or matrix information over a sequence an build the mean out of it.
    </description>
  </class>
  <class type="vision_plugins::Pyramid" base_class_type="csapex::Node">
    <description>
        Build an 8 level image or matrix pyramid.
    </description>
  </class>
  <class type="vision_plugins::Histogram" base_class_type="csapex::Node">
    <description>
        Calculate an 1D histogram for an image. Multiple Channels are supported, but only
        one value for the bin amount can be set.
    </description>
  </class>
  <class type="vision_plugins::RenderHistogram" base_class_type="csapex::Node">
    <description>
        Render histogram results.
    </description>
  </class>
  <class type="vision_plugins::BinomialFilter" base_class_type="csapex::Node">
    <description>
        Apply the binomial filter to either a matrix or an image.
    </description>
  </class>
  <class type="vision_plugins::SumChannels" base_class_type="csapex::Node">
    <description>
        Sum all image or matrix channels and optionally build the mean.
    </description>
  </class>
  <class type="vision_plugins::LabelRegions" base_class_type="csapex::Node">
    <description>
        Label regions devided by edges.
    </description>
  </class>
  <class type="vision_plugins::RenderLabels" base_class_type="csapex::Node">
    <description>
        Render labels that where found by the floodfill algorithm.
    </description>
  </class>
  <class type="vision_plugins::DifferenceMaximum" base_class_type="csapex::Node">
    <description>
        Build the maxmimum difference of neighbouring pixels.
    </description>
  </class>
  <class type="vision_plugins::NoiseFilter" base_class_type="csapex::Node">
    <description>
        Satistical methods to do noise filtering.
    </description>
  </class>
</library>
